<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>.milk</title>
 <link href="https://cheshirecatalyst.github.io/atom.xml" rel="self"/>
 <link href="https://cheshirecatalyst.github.io/"/>
 <updated>2016-09-11T18:16:22-04:00</updated>
 <id>https://cheshirecatalyst.github.io</id>
 <author>
   <name>Seth Price</name>
   <email></email>
 </author>

 
 <entry>
   <title>Switching To Flexbox</title>
   <link href="https://cheshirecatalyst.github.io/2016/09/06/switching-to-flexbox/"/>
   <updated>2016-09-06T12:42:00-04:00</updated>
   <id>https://cheshirecatalyst.github.io/2016/09/06/switching-to-flexbox</id>
   <content type="html">&lt;p&gt;
So when I got started with this blog, I grabbed the first thing that I saw I liked and was
good to go, out of the box. That happened to be &lt;a href=&quot;https://github.com/karloespiritu/BlackDoc&quot;&gt;BlackDoc&lt;/a&gt;. I did this mainly so I could experiment with Emacs
and blogging from it through &lt;a href=&quot;https://jekyllrb.com&quot;&gt;jekyll&lt;/a&gt;, also I generally despise any &#39;front-end&#39; work. Mostly due
to caring about browsers, caring about finding the right polyfill, old versions of IE, Css hacks
and generally what I consider to be a never ending barrage of bullshit that regular users are
shielded from, but developers must be constantly aware of. This to me, makes forward facing tech
on the web irritating, arbitrarily hard and not worth it. However, since this is just a thing I&#39;m
doing for me and I don&#39;t care what browser where renders what in some way, I decided to give the
whole html5 Css thing another go.
&lt;/p&gt;

&lt;p&gt;
So I started with what I sort of remembered, I need to reset or something, and then I found that
apparently lots of people are normalizing instead. Grabbed &lt;a href=&quot;https://github.com/JohnAlbin/normalize-scss&quot;&gt;this&lt;/a&gt; scss version of &lt;a href=&quot;https://github.com/necolas/normalize.css/&quot;&gt;Normalize.css&lt;/a&gt;. Now
where do I find just some good stuff, you know what I mean, a sensible base layer. Poking around and
a wild &lt;a href=&quot;http://getskeleton.com&quot;&gt;skeleton&lt;/a&gt; appeared, then I located &lt;a href=&quot;https://github.com/WhatsNewSaes/Skeleton-Sass&quot;&gt;this&lt;/a&gt; scss version which had the normalize removed, what luck
since i had already found the standalone one.
&lt;/p&gt;

&lt;p&gt;
At first I was messing around with the skeleton grid system, pretty sweet, but when I was exploring
I kept hearing about &lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot;&gt;flexbox&lt;/a&gt; is coming soon, so I looked into this flexy box thing. Turns out it had
arrived already. With this knowledge in hand I quickly located &lt;a href=&quot;http://flexboxgrid.com&quot;&gt;flexbox grid&lt;/a&gt; and disabled importing
the grid system from skeleton. Nice nice, great start. Then I found out that chrome dropped support
for position: sticky, messed around with java script polyfills for making this work. Then I decided
meh who cares. With that tidbit out of the way, I moved on to colors. Even though I generally
dislike frontend work I have always loved colors, which gave me another chance to use one of my favorite
tools &lt;a href=&quot;http://sipapp.io&quot;&gt;sip&lt;/a&gt;, very cool. So I snagged me some colors, and got to work.
&lt;/p&gt;

&lt;p&gt;
Type type type, messing around with template, soooo many divs and divs as wrappers barf. I thought
this was &lt;a href=&quot;http://knowyourmeme.com/memes/come-on-it-s-2015-current-year&quot;&gt;&amp;gt;Current Year&lt;/a&gt; and there was supposed to be much semantic goodness. Much searching, find some
examples. Strip down the html present in my starting template, omg all the shapes and typesetting are
three kinds of messed up. Ok&amp;#x2026;Ok&amp;#x2026;Gonna bite the bullet lets strip this whole thing down, use
reference render of decent looking one rendered old way. Ok some sections an aside a nav and various
elements later, done. So I&#39;m looking at it and I&#39;m pretty unsatisfied with my navigation, and I think
to myself yeah, code. It should look like code.
&lt;/p&gt;

&lt;p&gt;
Great idea, I get to work on it manually plotting out some spans, simulate rainbow parenthesis. But there
is this huge gap at the bottom of my code block. What gives? Turns out that the end of the liquid for
tag before the closing &amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/nav&amp;gt; adds white space as it is interpreted literally. So I had
to capture the output:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nav_links&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;line_num&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pages_list&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;site.pages&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filtered_list&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;site.array&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;item&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;in&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;pages_list&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;page&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filtered_list&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;filtered_list&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;item&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;node&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;in&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;filtered_list&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;line_num&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;line_num&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forloop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
and insert it:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{{ nav_links | downcase }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
Instead of keeping the logic in between the tags, as it had originally been done in BlackDoc.
&lt;/p&gt;

&lt;p&gt;
Alright, then I noticed that for some reason (still unknown to me) if you visit &lt;a href=&quot;https://dotmilk.github.io/bug&quot;&gt;this&lt;/a&gt; bugged archived
copy of the main page. You will discover the thing that prompted me to ask &lt;a href=&quot;http://stackoverflow.com/q/39337638/2180406&quot;&gt;this&lt;/a&gt; question on SO. Basically
for some reason on safari the left hand nav is thin and anti-aliased while the pagination at the bottom
is not. I followed the advice, well sort of because I wanted both navigation places to look like the
pagination. Now I just need to style the tags on the main article pages and should be done, unless
I totally forgot about something. Probably did&amp;#x2026;probably did.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>E-Book Ahhhhhgony</title>
   <link href="https://cheshirecatalyst.github.io/2016/08/27/e-book-ahhhhhgony/"/>
   <updated>2016-08-27T16:52:00-04:00</updated>
   <id>https://cheshirecatalyst.github.io/2016/08/27/e-book-ahhhhhgony</id>
   <content type="html">&lt;p&gt;
So a year or so ago, I purchased an e-book version of &lt;a href=&quot;https://www.manning.com/books/elixir-in-action&quot;&gt;Elixir in Action&lt;/a&gt; after
having run through most of &lt;a href=&quot;http://learnyousomeerlang.com&quot;&gt;Learn You Some Erlang&lt;/a&gt; and discovering &lt;a href=&quot;http://elixir-lang.org&quot;&gt;Elixir&lt;/a&gt; which
I instantly fell in love with but had no immediate use for. Not wanting to
leverage this awesome thing I just found solely (or at all really) as yet another
web framework, I did not dive right in to &lt;a href=&quot;http://www.phoenixframework.org&quot;&gt;Phoenix&lt;/a&gt; and still have yet to. So I
needed something to sate my desire to ingrain Elixir into my brain. After 20 or
so exercises on &lt;a href=&quot;http://exercism.io/languages/elixir&quot;&gt;exercism.io&lt;/a&gt; I looked for some book action to learn the finer
points of all things not Phoenix.
&lt;/p&gt;

&lt;p&gt;
Enter &#39;Elixir in action&#39;, great book. Loved it, soft intro and gets deeper quickly.
However, on my kindle keyboard, the oft used images of code, instead of text
elsewhere in the book, are way too faded and low contrast and fail to show up
in a reasonable and readable manner. So I downloaded &lt;a href=&quot;https://calibre-ebook.com&quot;&gt;calibre&lt;/a&gt; to see what damage
I could do, as I know nothing about e-books at all. After a few failed conversions
to what calibre considers an editable format, failed as in, I didn&#39;t like how the
text looked after putting it back on the kindle. I went ahead and just opened the
book editor, woo a simple image editor, normalize and sharpen looks good. Almost
300 images and no bulk apply to all images feature I could find&amp;#x2026; WELLLLLL
&lt;/p&gt;


&lt;p&gt;
Then I shifted to converting it to a zip &lt;a href=&quot;http://www.imagemagick.org/script/index.php&quot;&gt;ImageMagick&lt;/a&gt; to the rescue.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mogrify -level 50x100% *.jpeg&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
Converted it into an azw3. Place on kindle, massive text formatting problems. Ok Ok
I think to myself must be a good way of going about this. Locate calibre plugin
for KindleUnpack, discover it is a wrapper locate the appropriate repo &lt;a href=&quot;https://github.com/kevinhendricks/KindleUnpack&quot;&gt;here&lt;/a&gt;. Unpack
the original book, do that ImageMagick, have calibre build me an azw3. Sigh, much less
in the horrible text department, but still I would consider unreadable, those images tho.
Ok Ok time to dive into some more conversion options
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Disable font size rescaling
&lt;/li&gt;
&lt;li&gt;Use Cybook G3 output and input profile as the resolution is right for my kindle
&lt;/li&gt;
&lt;li&gt;Replace detect chapters at Xpath with /
&lt;/li&gt;
&lt;li&gt;Replace insert page breaks before Xpath with /
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Hit blend&amp;#x2026;.BAM a readable book text and images all looking pretty good. Mission
success. Now I can finally get through chapter 5 after brushing back through chapter 4
and finish a book I bought forever ago.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Prelude To A Rabbit Hole</title>
   <link href="https://cheshirecatalyst.github.io/2016/08/23/prelude-to-a-rabbit-hole/"/>
   <updated>2016-08-23T19:01:00-04:00</updated>
   <id>https://cheshirecatalyst.github.io/2016/08/23/prelude-to-a-rabbit-hole</id>
   <content type="html">&lt;p&gt;
So I have spent the last two weeks or so ripping parts out of &lt;a href=&quot;https://github.com/bbatsov/prelude&quot;&gt;Prelude&lt;/a&gt; and learning about
minor mode creation and pretty much all the things I never never got around to checking
out. I think perhaps most of it was fear, and a little bit of lazy / lack of need /
want. A large part of this was due to &lt;a href=&quot;https://github.com/bbatsov/prelude&quot;&gt;Prelude&lt;/a&gt; and how it just worked, and still works. It
just had fulfilled its purpose in being an introduction to the way things could be in
Emacs.
&lt;/p&gt;

&lt;p&gt;
Basically I had gotten tired of throwing stuff in my personal directory and had a growing
file of things to work around features of prelude or adding funcitnality. One day it was too
much and I set about figuring what parts of prelude did what and why. Much was learned about
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Hooks.html&quot;&gt;hooks&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html&quot;&gt;advising&lt;/a&gt; functions
&lt;/li&gt;
&lt;li&gt;basic &lt;a href=&quot;https://github.com/bbatsov/prelude/blob/master/core/prelude-mode.el&quot;&gt;minor&lt;/a&gt; mode creation
&lt;/li&gt;
&lt;li&gt;some &lt;a href=&quot;https://github.com/tonini/alchemist.el/blob/master/alchemist.el#L115&quot;&gt;keymap&lt;/a&gt; fun
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I&#39;m sure there is much more, and that future posts will go into greater details.
For now though. Phew&amp;#x2026;..
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>TTIJD</title>
   <link href="https://cheshirecatalyst.github.io/2016/08/03/ttijd/"/>
   <updated>2016-08-03T16:31:00-04:00</updated>
   <id>https://cheshirecatalyst.github.io/2016/08/03/ttijd</id>
   <content type="html">&lt;p&gt;
That thing I just did, has started to be extremely helpful as far as &lt;a href=&quot;http://orgmode.org/&quot;&gt;org-mode&lt;/a&gt;
and my total &lt;a href=&quot;https://emacswiki.org/&quot;&gt;Emacs&lt;/a&gt; experience. Well&amp;#x2026;what is &quot;That thing I just did&quot;? Funny
you should ask me that as I just discovered a thing &#39;C-c l&#39; &lt;a href=&quot;http://orgmode.org/manual/Handling-links.html&quot;&gt;org-store-link&lt;/a&gt; as
I was trying to just insert the Emacs link above and forgot to keep &#39;C&#39; down
for the &#39;C-c C-l&#39;. Sure it was a diversion but I welcome temporary digressions
to a certain depth while engaged in my day to day activities. It&#39;s basically
like the &lt;a href=&quot;https://xkcd.com/214/&quot;&gt;problem&lt;/a&gt; with Wikipedia. Except for in Emacs, it&#39;s minutes of fascinated
&#39;C-h k&#39; which tells me wtf this key combo does or &#39;C-h v&#39; which tells me wtf this
variable is and how it relates to the largely unknown mesh of abstractions that
let me type stuff like this.
&lt;/p&gt;

&lt;p&gt;
However I too have digressed, but not really. I just wrote about something I just
found out about, a feature of this thing I am writing this blog in which will
come in handy, and already had when I started using it and writing about the time
I discovered easy link creation while making &lt;a href=&quot;/2016/07/31/new-blog&quot;&gt;this other&lt;/a&gt; post&amp;#x2026;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/public/images/lpyramid.jpg&quot; alt=&quot;lpyramid.jpg&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
While the above pyramid has seen more than its fair share of use and abuse, certainly
a few of those items above will really help you and a different or overlapping set
will help someone else. For instance I have really been digging on &lt;a href=&quot;http://exercism.io/&quot;&gt;exercism.io&lt;/a&gt;
for my contrived experiences, which completing the elixir (I had them all done,
they have since added more) and common lisp problems in Emacs has given me direct
purposeful experience with Emacs. Say you are all about &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; and have your actual
work, workflow all set up there, and you&#39;ve heard about this Emacs thing. Well
you can keep your purposeful experience in atom (do your work there) and play with
contrived experiences in your preferred or new language in Emacs while getting
purposeful experience with it.
&lt;/p&gt;

&lt;p&gt;
Now I add a new layer in by blogging about my experience from inside one of the
technologies I have used to edit all parts of this blog. Which if I point out things
tips tricks chords then this .org file I&#39;m blogging from also becomes a sort of
&lt;a href=&quot;http://uncyclopedia.wikia.com/wiki/Worst_100_Self_Help_books_of_All_Time&quot;&gt;self-help&lt;/a&gt; &lt;a href=&quot;http://www.core-vector.net/files/redcode_cheatsheet.pdf&quot;&gt;cheat-sheet&lt;/a&gt;. Which is to say getting this blog going in a single file
has come with other unexpected benefits.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>After the WTF</title>
   <link href="https://cheshirecatalyst.github.io/2016/08/01/after-the-wtf/"/>
   <updated>2016-08-01T00:25:00-04:00</updated>
   <id>https://cheshirecatalyst.github.io/2016/08/01/after-the-wtf</id>
   <content type="html">&lt;p&gt;
Time for a little more meat and potatoes with this milk. What really inspired me
to start this blog was a &lt;a href=&quot;http://endlessparentheses.com/how-i-blog-one-year-of-posts-in-a-single-org-file.html&quot;&gt;post&lt;/a&gt; I came across. I must admit the idea of keeping my
blog in a single file sounded extremely sexy, so armed with this article I googled
my way to this point. All without ever having used org-mode at all or realizing
org-mode is like some sort of strange markdown it seems like. And now I am hooked.
&lt;/p&gt;

&lt;p&gt;
So the wtf:
&lt;/p&gt;

&lt;p&gt;
Apparently I had messed up some property or a tag in combination with something
funky in jekyll. Which somehow was getting blog posts for today rendered tomorrow.
No idea, I opened a talk thing over with the jekyll folks, ran through a bunch of
rm -rf, changed stuff, ended up removing all the properties added by the
endless/export-to-blog to my sub headings and running the command again, and some
how through all of that ::&lt;a href=&quot;https://github.com/sorin-ionescu/prezto&quot;&gt;prezto&lt;/a&gt;:: it was working.
&lt;/p&gt;

&lt;p&gt;
I think it really started when I noticed that my eagerness to write stuff and post
had resulted in multiple posts for today and they were out of order so I hit up the
google magic and located an old github &lt;a href=&quot;https://github.com/jekyll/jekyll/issues/30&quot;&gt;issue&lt;/a&gt; and it seemed to be fixed. So that was
nice however I realized the problem was with the script I had found on previously
mentioned blog SO&amp;#x2026; I did a quick hack and somewhere after that it broke, then
it fixed itself. I think it had to do with updating posts that had already been
marked by the script with a file name or something I dunno. Long story short&amp;#x2026;
&quot;Too late!&quot; I undid my hack and polished it up a bit and submitted a pull request
for great justice.
&lt;/p&gt;

&lt;p&gt;
In case my shit code is shit and not merge worthy here is my &lt;a href=&quot;https://github.com/cheshirecatalyst/ox-jekyll-subtree&quot;&gt;version&lt;/a&gt; and the
&lt;a href=&quot;https://github.com/Malabarba/ox-jekyll-subtree&quot;&gt;original&lt;/a&gt; by author of previously mentioned blog. I would check the original
first to see if merged or perhaps he wrote it in a better way. Though I assume
very few people are posting multiple times a day from org-mode using his handy
helper, but I&#39;m continuously wrong, so we shall see.
&lt;/p&gt;

&lt;p&gt;
UPDATE: So I think I tracked down what was going on. Originally the script
mentioned above was attempting to glean a date off of the scheduled time, and
since I&#39;m not sure how to make the script insert a scheduled date and time,
I noticed there was a closed field added that had an actual time stamp.
&lt;/p&gt;

&lt;p&gt;
Armed with this, I modified it to check for the presence of that before the
scheduled field and use that for the subsequent code. Though I&#39;m certain
there must be a way to just insert a real time-stamp into the scheduled field
instead of just a date. Will research tomorrow.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Up And Running-ish</title>
   <link href="https://cheshirecatalyst.github.io/2016/07/31/up-and-running-ish/"/>
   <updated>2016-07-31T18:56:00-04:00</updated>
   <id>https://cheshirecatalyst.github.io/2016/07/31/up-and-running-ish</id>
   <content type="html">&lt;p&gt;
And now (hopefully) I have my google analytics up and running thanks to this
&lt;a href=&quot;http://stackoverflow.com/a/36797554&quot;&gt;answer&lt;/a&gt; which is further explained in &lt;a href=&quot;https://desiredpersona.com/google-analytics-jekyll/&quot;&gt;this&lt;/a&gt; blog post by aforementioned answer-er.
Many thanks to him, and those working on &lt;a href=&quot;https://jekyllrb.com&quot;&gt;jekyll&lt;/a&gt;. I am really starting to appreciate
the stack as it is extremely intuitive and well documented. While they aren&#39;t really
in competition as they are for completely different domains, I consider jekyll to be
another great victory in the non-rails ruby web tech area.
&lt;/p&gt;

&lt;p&gt;
Oh, I almost forgot many thanks to &lt;a href=&quot;http://web-mode.org&quot;&gt;web-mode&lt;/a&gt; which I just found, as i was getting
tired of seeing all sorts of funky errors in my .html from the jekyll templating
and such. This particular snippet after installation worked wonders:
&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot; data-lang=&quot;cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-to-list&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;auto-mode-alist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.html?\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;web-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;
Also useful was this &lt;a href=&quot;http://orgmode.org/manual/Languages.html&quot;&gt;list&lt;/a&gt; of supported languages in &lt;a href=&quot;http://orgmode.org/manual/Literal-examples.html&quot;&gt;literal&lt;/a&gt; blocks with org-mode.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Instant Fun</title>
   <link href="https://cheshirecatalyst.github.io/2016/07/31/instant-fun/"/>
   <updated>2016-07-31T18:55:00-04:00</updated>
   <id>https://cheshirecatalyst.github.io/2016/07/31/instant-fun</id>
   <content type="html">&lt;p&gt;
So here is a useful &lt;a href=&quot;http://stackoverflow.com/questions/28249255/how-do-i-configure-github-to-use-non-supported-jekyll-site-plugins/28252200#28252200&quot;&gt;tidbit&lt;/a&gt; I came across while setting this whole thing up. I
suppose it is somewhat old news to some, however I am new to the &lt;a href=&quot;https://pages.github.com&quot;&gt;github pages&lt;/a&gt;
game and haven&#39;t looked at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;jekyll&lt;/a&gt; since 2010-ish. That last bit is entirely my
fault though, as I had left &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;ruby-land&lt;/a&gt; at that point and was off in &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;v8-world&lt;/a&gt;
until recently. When I quit my job and moved back to the united states. Crazy
I know.
&lt;/p&gt;

&lt;p&gt;
So after catching up on &lt;a href=&quot;https://serialpodcast.org&quot;&gt;serial&lt;/a&gt;, and getting back in to drawing, I finally got
to the point where I could look at code again. It was here as previously
mentioned that I got heavily into emacs. Which admittedly was less for the
sake of blogging, and more because I had finally committed to get more than
a passing familiarity with &lt;a href=&quot;https://common-lisp.net&quot;&gt;cl&lt;/a&gt;. Which meant spending time in emacs and &lt;a href=&quot;https://github.com/slime/slime&quot;&gt;slime&lt;/a&gt;
and the more time I spent in emacs the more I found out it can &lt;a href=&quot;https://www.emacswiki.org/emacs/TheKitchenSink&quot;&gt;do&lt;/a&gt;. This, I am
almost certain, is an age-old story of emacs addiction. I wonder if there is
a 12 step program for this?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New Blog</title>
   <link href="https://cheshirecatalyst.github.io/2016/07/30/new-blog/"/>
   <updated>2016-07-30T00:05:00-04:00</updated>
   <id>https://cheshirecatalyst.github.io/2016/07/30/new-blog</id>
   <content type="html">&lt;p&gt;
Today I started on a new multi-pronged adventure. Ok, well most of those
prongs all revolve around &lt;a href=&quot;https://emacswiki.org&quot;&gt;Emacs&lt;/a&gt;. Which is a cool looking and fun program in general.
So this adventure began when I decided to graduate from using it for editing
commit messages, and try to use it exclusively. Thus this blog is born.
&lt;/p&gt;


&lt;p&gt;
It&#39;s a pretty hefty task getting all the things how you want them, learning all
the &lt;a href=&quot;https://www.emacswiki.org/emacs/KeyChord&quot;&gt;chords&lt;/a&gt; sorting through similar yet frustratingly different problems and
solutions. This struggle in and of itself, helps the learner on many levels.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
Did this work? I hope it did. And it did. Which is nice since I&#39;ve never even touched
&lt;a href=&quot;http://orgmode.org&quot;&gt;org-mode&lt;/a&gt; before. In fact while writing that line I got sick of manually typing in
square brackets and looked up the chord for &#39;org-insert-link&#39; &#39;C-c C-l&#39;, which
took many keystrokes to hunt down, however over time the initial investment of
a few extra keystrokes is certainly worth never having to type those square brackets
again unless I just R E A L L Y wanted to. It seems I have digressed, I was excited
because the &lt;a href=&quot;http://orgmode.org/manual/Easy-templates.html#Easy-templates&quot;&gt;easy&lt;/a&gt; feature I read about to make a code block and see if it
was indeed exported as html worked. That is both the feature and the translation to
a code block in the output.
&lt;/p&gt;

&lt;p&gt;
I will cover this process more in depth in the future, but for now I am just stoked
this is all working, and glad I put the initial effort into Emacs to reach the
critical mass point where it all (at least to me) seems to start coming together.&lt;/p&gt;
</content>
 </entry>
 

</feed>
